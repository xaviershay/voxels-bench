#version 330 core
layout (points) in;
layout (triangle_strip, max_vertices = 24) out;

in VS_OUT {
    ivec3 a_pos;
} gs_in[];

uniform sampler3D t_data;
uniform ivec3 world_size;
uniform mat4 u_model_view_proj;


vec4 cubeVerts[8] = vec4[8](
    vec4(-0.5, -0.5, -0.5,1), // FLB   0
    vec4(-0.5, 0.5, -0.5,1),  // FLT   1
    vec4(0.5, -0.5, -0.5,1),  // FRB   2
    vec4( 0.5, 0.5, -0.5,1),  // FRT   3
    vec4(-0.5, -0.5, 0.5,1),  // BLB   4
    vec4(-0.5, 0.5, 0.5,1),   // BLT   5
    vec4(0.5, -0.5, 0.5,1),   // BRB   6
    vec4(0.5, 0.5, 0.5,1)     // BRT   7
);

void emitQuad(int a, int b, int c, int d) {
    vec4 pos = gl_in[0].gl_Position;
    float scale = 0.9;

    gl_Position = u_model_view_proj * (pos + cubeVerts[a] * scale);
    EmitVertex();

    gl_Position = u_model_view_proj * (pos + cubeVerts[b] * scale);
    EmitVertex();

    gl_Position = u_model_view_proj * (pos + cubeVerts[c] * scale);
    EmitVertex();

    gl_Position = u_model_view_proj * (pos + cubeVerts[d] * scale);
    EmitVertex();

    EndPrimitive();
}
void main() {
    vec4 pos = gl_in[0].gl_Position;
    ivec3 gridPos = gs_in[0].a_pos;
    float radius = 0.4;
    float height = texture(t_data,
        vec3(
            gridPos.x / (world_size.x - 1),
            gridPos.y / (world_size.y - 1),
            gridPos.z / (world_size.z - 1)
        )
    ).w;

    cubeVerts[1].y = height - 0.5;
    cubeVerts[3].y = height - 0.5;
    cubeVerts[5].y = height - 0.5;
    cubeVerts[7].y = height - 0.5;

    emitQuad(0, 2, 4, 6); // Bottom quad
    emitQuad(0, 1, 2, 3); // Front quad
    emitQuad(4, 5, 6, 7); // Back
    emitQuad(1, 3, 5, 7); // Top
    emitQuad(0, 1, 4, 5); // Left
    emitQuad(2, 3, 6, 7); // Right
}